// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jarvis/contracts/v1/sample_type.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The type of the sample.
type SampleType int32

const (
	SampleType_SAMPLE_TYPE_INVALID     SampleType = 0
	SampleType_SAMPLE_TYPE_ELECTRICITY SampleType = 1
	SampleType_SAMPLE_TYPE_GAS         SampleType = 2
	SampleType_SAMPLE_TYPE_TEMPERATURE SampleType = 3
	SampleType_SAMPLE_TYPE_PRESSURE    SampleType = 4
	SampleType_SAMPLE_TYPE_FLOW        SampleType = 5
	SampleType_SAMPLE_TYPE_HUMIDITY    SampleType = 6
	SampleType_SAMPLE_TYPE_TIME        SampleType = 7
)

var SampleType_name = map[int32]string{
	0: "SAMPLE_TYPE_INVALID",
	1: "SAMPLE_TYPE_ELECTRICITY",
	2: "SAMPLE_TYPE_GAS",
	3: "SAMPLE_TYPE_TEMPERATURE",
	4: "SAMPLE_TYPE_PRESSURE",
	5: "SAMPLE_TYPE_FLOW",
	6: "SAMPLE_TYPE_HUMIDITY",
	7: "SAMPLE_TYPE_TIME",
}

var SampleType_value = map[string]int32{
	"SAMPLE_TYPE_INVALID":     0,
	"SAMPLE_TYPE_ELECTRICITY": 1,
	"SAMPLE_TYPE_GAS":         2,
	"SAMPLE_TYPE_TEMPERATURE": 3,
	"SAMPLE_TYPE_PRESSURE":    4,
	"SAMPLE_TYPE_FLOW":        5,
	"SAMPLE_TYPE_HUMIDITY":    6,
	"SAMPLE_TYPE_TIME":        7,
}

func (x SampleType) String() string {
	return proto.EnumName(SampleType_name, int32(x))
}

func (SampleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b2bc6da1bfeb3f7, []int{0}
}

func init() {
	proto.RegisterEnum("jarvis.contracts.v1.SampleType", SampleType_name, SampleType_value)
}

func init() {
	proto.RegisterFile("jarvis/contracts/v1/sample_type.proto", fileDescriptor_1b2bc6da1bfeb3f7)
}

var fileDescriptor_1b2bc6da1bfeb3f7 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0x87, 0x9d, 0x7f, 0x26, 0xbc, 0x17, 0x43, 0x3a, 0x98, 0xe0, 0xd9, 0x8b, 0xb0, 0x86, 0xe1,
	0x5d, 0xac, 0xdb, 0xab, 0x46, 0x5a, 0x2d, 0x4d, 0xa6, 0xcc, 0x4b, 0xc9, 0x6a, 0xa9, 0x95, 0x6e,
	0x29, 0x69, 0x2c, 0xec, 0x7b, 0xfa, 0x81, 0x64, 0x1b, 0x8c, 0xac, 0xe7, 0xe7, 0xf9, 0xf1, 0x83,
	0x07, 0xae, 0x7f, 0x94, 0x69, 0xcb, 0x86, 0x65, 0x7a, 0x65, 0x8d, 0xca, 0x6c, 0xc3, 0xda, 0x31,
	0x6b, 0xd4, 0xb2, 0xae, 0xf2, 0xd4, 0xae, 0xeb, 0xdc, 0xaf, 0x8d, 0xb6, 0x9a, 0x7a, 0x3b, 0xcd,
	0xdf, 0x6b, 0x7e, 0x3b, 0xbe, 0xf9, 0xeb, 0x01, 0x88, 0xad, 0x2a, 0xd7, 0x75, 0x4e, 0x87, 0xe0,
	0x89, 0x20, 0x8a, 0x43, 0x4c, 0xe5, 0x3c, 0xc6, 0x94, 0xbf, 0xbe, 0x07, 0x21, 0x9f, 0x92, 0x23,
	0x7a, 0x05, 0x43, 0x17, 0x60, 0x88, 0x13, 0x99, 0xf0, 0x09, 0x97, 0x73, 0xd2, 0xa3, 0x1e, 0x5c,
	0xb8, 0xf0, 0x29, 0x10, 0xe4, 0xb8, 0xbb, 0x90, 0x18, 0xc5, 0x98, 0x04, 0x72, 0x96, 0x20, 0x39,
	0xa1, 0x97, 0x30, 0x70, 0x61, 0x9c, 0xa0, 0x10, 0x1b, 0x72, 0x4a, 0x07, 0x40, 0x5c, 0xf2, 0x18,
	0xbe, 0x7d, 0x90, 0xb3, 0xae, 0xff, 0x3c, 0x8b, 0xf8, 0x74, 0xf3, 0xdd, 0xef, 0xfa, 0x92, 0x47,
	0x48, 0xce, 0x1f, 0xee, 0x3f, 0xef, 0x8a, 0xd2, 0x7e, 0xff, 0x2e, 0xfc, 0x4c, 0x2f, 0xd9, 0x8b,
	0x36, 0xa6, 0xb4, 0x42, 0x55, 0x6d, 0x6e, 0xbe, 0x14, 0xdb, 0x75, 0x18, 0xed, 0x3b, 0x8c, 0x0a,
	0x5d, 0xa9, 0x55, 0x71, 0xd0, 0x6f, 0xd1, 0xdf, 0x46, 0xbb, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x99, 0x8e, 0x58, 0x1b, 0x5d, 0x01, 0x00, 0x00,
}
